% json file sourced from:
%   https://www.swpc.noaa.gov/products/solar-cycle-progression

fid = fopen('../data/observedSolarCycleIndices.json'); % Opening the file
raw = fread(fid,inf); % Reading the contents
str = char(raw'); % Transformation
fclose(fid); % Closing the file
data = jsondecode(str); % Using the jsondecode function to parse JSON from string
data_table = struct2table(data);

fid = fopen('../data/predicted-solar-cycle.json'); % Opening the file
raw = fread(fid,inf); % Reading the contents
str = char(raw'); % Transformation
fclose(fid); % Closing the file
data = jsondecode(str); % Using the jsondecode function to parse JSON from string
noaa_pred_data_table = struct2table(data);

% Change to "datetime" datatype
%   Assumes 1st of the month for each time stamp
T = datetime(data_table.time_tag,'InputFormat','yyyy-MM');

% NOAA predictions
T_pred = datetime(noaa_pred_data_table.time_tag,'InputFormat','yyyy-MM');

% indices for training and test data 1950 <= year(T)) & 
iTrain = ((1950 <= year(T)) & (year(T) <= 1990));
iPredict = (year(T) > 1990);

% Splitting data table into training and test
training_data = data_table(iTrain,:);
T_train = datetime(training_data.time_tag,'InputFormat','yyyy-MM');
test_data = data_table(iPredict,:);
T_test = datetime(test_data.time_tag,'InputFormat','yyyy-MM');

best_model = [];
best_aic = Inf;

% Define ranges for p, d, q
p_range = 0:2;
d_range = 0:1;
q_range = 0:2;

% Define ranges for P, D, Q
P_range = 0:1;
D_range = 0:1;
Q_range = 0:1;


for p = p_range
    for d = d_range
        for q = q_range
            for P = P_range
                for D = D_range
                    for Q = Q_range
                        % Fit ARIMA model
                        model = arima('Constant',0,'D',1,...
                                    'Seasonality',138,...
                                    'ARLags',2,'SARLags',10, ...
                                    'MALags',1,'SMALags',138);
                        fit = estimate(model, training_data.ssn);
                        results = summarize(fit);
                        % Calculate AIC
                        aic_value = results.AIC;

                        % Update best model if current model is better
                        if aic_value < best_aic
                            best_aic = aic_value;
                            best_model = fit;
                            best_params = [p, d, q, P, D, Q];
                        end
                    end
                end
            end
        end
    end
end

% Display best parameters and model information
disp('Best ARIMA Model Parameters:');
disp(best_params);
disp('Best Model Information Criteria:');
disp(['AIC: ', num2str(best_model.AIC)]);
disp(best_model);